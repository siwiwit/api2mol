grammar api2mol;

options {
	k=4;
	backtrack=true;

	output=template;
}


// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
mainRule returns [Node returnNode] 
:  contextSectionGen+=contextSection?  defaultMetaclassSectionGen+=defaultMetaclassSection?  mappingGen+=mapping* 
	{
		// Create return CST Node
		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mainRuleReturnNode.setKind("mainRule");
	    // Create a CST Node
		if($contextSectionGen != null) {
	        for(Iterator it = $contextSectionGen.iterator(); it.hasNext(); )  { 
	            api2molParser.contextSection_return r = (api2molParser.contextSection_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("contextSection");
	            	mainRuleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($defaultMetaclassSectionGen != null) {
	        for(Iterator it = $defaultMetaclassSectionGen.iterator(); it.hasNext(); )  { 
	            api2molParser.defaultMetaclassSection_return r = (api2molParser.defaultMetaclassSection_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("defaultMetaclassSection");
	            	mainRuleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($mappingGen != null) {
	        for(Iterator it = $mappingGen.iterator(); it.hasNext(); )  { 
	            api2molParser.mapping_return r = (api2molParser.mapping_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("mapping");
	            	mainRuleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$mainRule.returnNode = mainRuleReturnNode;
	}
	;
	
contextSection returns [Node returnNode] 
:  ATGen=AT  CONTEXTGen=CONTEXT  instanceNameGen+=instanceName ( COMMAGen_List+=COMMA  instanceNameGen_1+=instanceName)*  SEMIGen=SEMI 
	{
		// Create return CST Node
		Node contextSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		contextSectionReturnNode.setKind("contextSection");
	    // Create a CST Leaf
		if($ATGen != null) {
			Leaf ATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AT", $ATGen.text, ATGen.getCharPositionInLine(), ATGen.getLine());
			contextSectionReturnNode.getChildren().add(ATGenLeaf);
		}
	    // Create a CST Leaf
		if($CONTEXTGen != null) {
			Leaf CONTEXTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CONTEXT", $CONTEXTGen.text, CONTEXTGen.getCharPositionInLine(), CONTEXTGen.getLine());
			contextSectionReturnNode.getChildren().add(CONTEXTGenLeaf);
		}
	    // Create a CST Node
		if($instanceNameGen != null) {
	        for(Iterator it = $instanceNameGen.iterator(); it.hasNext(); )  { 
	            api2molParser.instanceName_return r = (api2molParser.instanceName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("instanceName");
	            	contextSectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMMA", t.getText(), t.getCharPositionInLine(), t.getLine());
			contextSectionReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($instanceNameGen_1 != null) {		
	    	api2molParser.instanceName_return r = (api2molParser.instanceName_return) $instanceNameGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("instanceName");
	    		contextSectionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SEMI", $SEMIGen.text, SEMIGen.getCharPositionInLine(), SEMIGen.getLine());
			contextSectionReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$contextSection.returnNode = contextSectionReturnNode;
	}
	;
	
defaultMetaclassSection returns [Node returnNode] 
:  ATGen=AT  DEFAULT_METACLASSGen=DEFAULT_METACLASS  IDGen=ID  LPARENGen=LPAREN  IDGen_1=ID  RPARENGen=RPAREN  SEMIGen=SEMI 
	{
		// Create return CST Node
		Node defaultMetaclassSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		defaultMetaclassSectionReturnNode.setKind("defaultMetaclassSection");
	    // Create a CST Leaf
		if($ATGen != null) {
			Leaf ATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AT", $ATGen.text, ATGen.getCharPositionInLine(), ATGen.getLine());
			defaultMetaclassSectionReturnNode.getChildren().add(ATGenLeaf);
		}
	    // Create a CST Leaf
		if($DEFAULT_METACLASSGen != null) {
			Leaf DEFAULT_METACLASSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DEFAULT_METACLASS", $DEFAULT_METACLASSGen.text, DEFAULT_METACLASSGen.getCharPositionInLine(), DEFAULT_METACLASSGen.getLine());
			defaultMetaclassSectionReturnNode.getChildren().add(DEFAULT_METACLASSGenLeaf);
		}
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			defaultMetaclassSectionReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAREN", $LPARENGen.text, LPARENGen.getCharPositionInLine(), LPARENGen.getLine());
			defaultMetaclassSectionReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($IDGen_1 != null) {
			Leaf IDGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen_1.text, IDGen_1.getCharPositionInLine(), IDGen_1.getLine());
			defaultMetaclassSectionReturnNode.getChildren().add(IDGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAREN", $RPARENGen.text, RPARENGen.getCharPositionInLine(), RPARENGen.getLine());
			defaultMetaclassSectionReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SEMI", $SEMIGen.text, SEMIGen.getCharPositionInLine(), SEMIGen.getLine());
			defaultMetaclassSectionReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$defaultMetaclassSection.returnNode = defaultMetaclassSectionReturnNode;
	}
	;

mapping returns [Node returnNode] 
: ( ENUMGen=ENUM)?  metaclassNameGen+=metaclassName  COLONGen=COLON  instanceNameGen+=instanceName  LCURLYGen=LCURLY  sectionGen+=section*  RCURLYGen=RCURLY 
	{
		// Create return CST Node
		Node mappingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mappingReturnNode.setKind("mapping");
	    // Create a CST Leaf
		if($ENUMGen != null) {
			Leaf ENUMGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ENUM", $ENUMGen.text, ENUMGen.getCharPositionInLine(), ENUMGen.getLine());
			mappingReturnNode.getChildren().add(ENUMGenLeaf);
		}
	    // Create a CST Node
		if($metaclassNameGen != null) {
	        for(Iterator it = $metaclassNameGen.iterator(); it.hasNext(); )  { 
	            api2molParser.metaclassName_return r = (api2molParser.metaclassName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("metaclassName");
	            	mappingReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", $COLONGen.text, COLONGen.getCharPositionInLine(), COLONGen.getLine());
			mappingReturnNode.getChildren().add(COLONGenLeaf);
		}
	    // Create a CST Node
		if($instanceNameGen != null) {
	        for(Iterator it = $instanceNameGen.iterator(); it.hasNext(); )  { 
	            api2molParser.instanceName_return r = (api2molParser.instanceName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("instanceName");
	            	mappingReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LCURLYGen != null) {
			Leaf LCURLYGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LCURLY", $LCURLYGen.text, LCURLYGen.getCharPositionInLine(), LCURLYGen.getLine());
			mappingReturnNode.getChildren().add(LCURLYGenLeaf);
		}
	    // Create a CST Node
		if($sectionGen != null) {
	        for(Iterator it = $sectionGen.iterator(); it.hasNext(); )  { 
	            api2molParser.section_return r = (api2molParser.section_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("section");
	            	mappingReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RCURLYGen != null) {
			Leaf RCURLYGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RCURLY", $RCURLYGen.text, RCURLYGen.getCharPositionInLine(), RCURLYGen.getLine());
			mappingReturnNode.getChildren().add(RCURLYGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$mapping.returnNode = mappingReturnNode;
	} // Use semantic predicates to make easier the parser
	;

metaclassName returns [Node returnNode] 
:  IDGen=ID 
	{
		// Create return CST Node
		Node metaclassNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		metaclassNameReturnNode.setKind("metaclassName");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			metaclassNameReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$metaclassName.returnNode = metaclassNameReturnNode;
	}
	;
	
instanceName returns [Node returnNode] 
:  IDGen=ID ( DOTGen_List+=DOT  IDGen_1_List+=ID)* 
	{
		// Create return CST Node
		Node instanceNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		instanceNameReturnNode.setKind("instanceName");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			instanceNameReturnNode.getChildren().add(IDGenLeaf);
		}

		// Create a special CST Node for terminal DOTGen_List aggregation
		if($DOTGen_List != null) {
	    for(int pos = 0; pos < $DOTGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($DOTGen_List != null) {
		    Token t = (Token) $DOTGen_List.get(pos); 
		    Leaf DOTGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", t.getText(), t.getCharPositionInLine(), t.getLine());
			instanceNameReturnNode.getChildren().add(DOTGen_ListLeaf);
		}
		// Terminal extractor
	    if($IDGen_1_List != null) {
		    Token t = (Token) $IDGen_1_List.get(pos); 
		    Leaf IDGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", t.getText(), t.getCharPositionInLine(), t.getLine());
			instanceNameReturnNode.getChildren().add(IDGen_1_ListLeaf);
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$instanceName.returnNode = instanceNameReturnNode;
	}
	;

section returns [Node returnNode] 
:  newSectionGen+=newSection 
	{
		// Create return CST Node
		Node sectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sectionReturnNode.setKind("section");
	    // Create a CST Node
		if($newSectionGen != null) {
	        for(Iterator it = $newSectionGen.iterator(); it.hasNext(); )  { 
	            api2molParser.newSection_return r = (api2molParser.newSection_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("newSection");
	            	sectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$section.returnNode = sectionReturnNode;
	}
	|  multipleSectionGen+=multipleSection 
	{
		// Create return CST Node
		Node sectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sectionReturnNode.setKind("section");
	    // Create a CST Node
		if($multipleSectionGen != null) {
	        for(Iterator it = $multipleSectionGen.iterator(); it.hasNext(); )  { 
	            api2molParser.multipleSection_return r = (api2molParser.multipleSection_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("multipleSection");
	            	sectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$section.returnNode = sectionReturnNode;
	}
	|  propertySectionGen+=propertySection 
	{
		// Create return CST Node
		Node sectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sectionReturnNode.setKind("section");
	    // Create a CST Node
		if($propertySectionGen != null) {
	        for(Iterator it = $propertySectionGen.iterator(); it.hasNext(); )  { 
	            api2molParser.propertySection_return r = (api2molParser.propertySection_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("propertySection");
	            	sectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$section.returnNode = sectionReturnNode;
	}
	|  valueSectionGen+=valueSection 
	{
		// Create return CST Node
		Node sectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		sectionReturnNode.setKind("section");
	    // Create a CST Node
		if($valueSectionGen != null) {
	        for(Iterator it = $valueSectionGen.iterator(); it.hasNext(); )  { 
	            api2molParser.valueSection_return r = (api2molParser.valueSection_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("valueSection");
	            	sectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$section.returnNode = sectionReturnNode;
	}
	;

newSection returns [Node returnNode] 
:  ATGen=AT  NEWGen=NEW  constructorCallGen+=constructorCall* 
	{
		// Create return CST Node
		Node newSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		newSectionReturnNode.setKind("newSection");
	    // Create a CST Leaf
		if($ATGen != null) {
			Leaf ATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AT", $ATGen.text, ATGen.getCharPositionInLine(), ATGen.getLine());
			newSectionReturnNode.getChildren().add(ATGenLeaf);
		}
	    // Create a CST Leaf
		if($NEWGen != null) {
			Leaf NEWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NEW", $NEWGen.text, NEWGen.getCharPositionInLine(), NEWGen.getLine());
			newSectionReturnNode.getChildren().add(NEWGenLeaf);
		}
	    // Create a CST Node
		if($constructorCallGen != null) {
	        for(Iterator it = $constructorCallGen.iterator(); it.hasNext(); )  { 
	            api2molParser.constructorCall_return r = (api2molParser.constructorCall_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("constructorCall");
	            	newSectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$newSection.returnNode = newSectionReturnNode;
	} 
	;
	
multipleSection returns [Node returnNode] 
:  ATGen=AT  MULTIPLEGen=MULTIPLE  statementGen+=statement* 
	{
		// Create return CST Node
		Node multipleSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		multipleSectionReturnNode.setKind("multipleSection");
	    // Create a CST Leaf
		if($ATGen != null) {
			Leaf ATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AT", $ATGen.text, ATGen.getCharPositionInLine(), ATGen.getLine());
			multipleSectionReturnNode.getChildren().add(ATGenLeaf);
		}
	    // Create a CST Leaf
		if($MULTIPLEGen != null) {
			Leaf MULTIPLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MULTIPLE", $MULTIPLEGen.text, MULTIPLEGen.getCharPositionInLine(), MULTIPLEGen.getLine());
			multipleSectionReturnNode.getChildren().add(MULTIPLEGenLeaf);
		}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            api2molParser.statement_return r = (api2molParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	multipleSectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$multipleSection.returnNode = multipleSectionReturnNode;
	}
	;

propertySection returns [Node returnNode] 
:  IDGen=ID  COLONGen=COLON  statementGen+=statement* 
	{
		// Create return CST Node
		Node propertySectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		propertySectionReturnNode.setKind("propertySection");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			propertySectionReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", $COLONGen.text, COLONGen.getCharPositionInLine(), COLONGen.getLine());
			propertySectionReturnNode.getChildren().add(COLONGenLeaf);
		}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            api2molParser.statement_return r = (api2molParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	propertySectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$propertySection.returnNode = propertySectionReturnNode;
	}
	;
	
valueSection returns [Node returnNode] 
:  IDGen=ID  COLONGen=COLON  instanceNameGen+=instanceName  SEMIGen=SEMI 
	{
		// Create return CST Node
		Node valueSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		valueSectionReturnNode.setKind("valueSection");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			valueSectionReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", $COLONGen.text, COLONGen.getCharPositionInLine(), COLONGen.getLine());
			valueSectionReturnNode.getChildren().add(COLONGenLeaf);
		}
	    // Create a CST Node
		if($instanceNameGen != null) {
	        for(Iterator it = $instanceNameGen.iterator(); it.hasNext(); )  { 
	            api2molParser.instanceName_return r = (api2molParser.instanceName_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("instanceName");
	            	valueSectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SEMI", $SEMIGen.text, SEMIGen.getCharPositionInLine(), SEMIGen.getLine());
			valueSectionReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$valueSection.returnNode = valueSectionReturnNode;
	}
	;

statement returns [Node returnNode] 
:  IDGen=ID ( LPARENGen=LPAREN  variableGen+=variable ( COMMAGen_List+=COMMA  variableGen_1+=variable)*  RPARENGen=RPAREN)? ( methodCallGen+=methodCall)?  SEMIGen=SEMI 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			statementReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAREN", $LPARENGen.text, LPARENGen.getCharPositionInLine(), LPARENGen.getLine());
			statementReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($variableGen != null) {
	        for(Iterator it = $variableGen.iterator(); it.hasNext(); )  { 
	            api2molParser.variable_return r = (api2molParser.variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("variable");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMMA", t.getText(), t.getCharPositionInLine(), t.getLine());
			statementReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($variableGen_1 != null) {		
	    	api2molParser.variable_return r = (api2molParser.variable_return) $variableGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("variable");
	    		statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAREN", $RPARENGen.text, RPARENGen.getCharPositionInLine(), RPARENGen.getLine());
			statementReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Node
		if($methodCallGen != null) {
	        for(Iterator it = $methodCallGen.iterator(); it.hasNext(); )  { 
	            api2molParser.methodCall_return r = (api2molParser.methodCall_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("methodCall");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SEMI", $SEMIGen.text, SEMIGen.getCharPositionInLine(), SEMIGen.getLine());
			statementReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	;

constructorCall returns [Node returnNode] 
:  IDGen=ID  LPARENGen=LPAREN ( paramGen+=param ( COMMAGen_List+=COMMA  paramGen_1+=param)*)?  RPARENGen=RPAREN  SEMIGen=SEMI 
	{
		// Create return CST Node
		Node constructorCallReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		constructorCallReturnNode.setKind("constructorCall");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			constructorCallReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAREN", $LPARENGen.text, LPARENGen.getCharPositionInLine(), LPARENGen.getLine());
			constructorCallReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            api2molParser.param_return r = (api2molParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	constructorCallReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMMA", t.getText(), t.getCharPositionInLine(), t.getLine());
			constructorCallReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($paramGen_1 != null) {		
	    	api2molParser.param_return r = (api2molParser.param_return) $paramGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("param");
	    		constructorCallReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAREN", $RPARENGen.text, RPARENGen.getCharPositionInLine(), RPARENGen.getLine());
			constructorCallReturnNode.getChildren().add(RPARENGenLeaf);
		}
	    // Create a CST Leaf
		if($SEMIGen != null) {
			Leaf SEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SEMI", $SEMIGen.text, SEMIGen.getCharPositionInLine(), SEMIGen.getLine());
			constructorCallReturnNode.getChildren().add(SEMIGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$constructorCall.returnNode = constructorCallReturnNode;
	}
	;

methodCall returns [Node returnNode] 
:  IDGen=ID ( LPARENGen=LPAREN ( paramGen+=param ( COMMAGen_List+=COMMA  paramGen_1+=param)*)?  RPARENGen=RPAREN)? 
	{
		// Create return CST Node
		Node methodCallReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		methodCallReturnNode.setKind("methodCall");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			methodCallReturnNode.getChildren().add(IDGenLeaf);
		}
	    // Create a CST Leaf
		if($LPARENGen != null) {
			Leaf LPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAREN", $LPARENGen.text, LPARENGen.getCharPositionInLine(), LPARENGen.getLine());
			methodCallReturnNode.getChildren().add(LPARENGenLeaf);
		}
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            api2molParser.param_return r = (api2molParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	methodCallReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal COMMAGen_List aggregation
		if($COMMAGen_List != null) {
	    for(int pos = 0; pos < $COMMAGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($COMMAGen_List != null) {
		    Token t = (Token) $COMMAGen_List.get(pos); 
		    Leaf COMMAGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COMMA", t.getText(), t.getCharPositionInLine(), t.getLine());
			methodCallReturnNode.getChildren().add(COMMAGen_ListLeaf);
		}
		// No Terminal extractor
	    if($paramGen_1 != null) {		
	    	api2molParser.param_return r = (api2molParser.param_return) $paramGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("param");
	    		methodCallReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a CST Leaf
		if($RPARENGen != null) {
			Leaf RPARENGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAREN", $RPARENGen.text, RPARENGen.getCharPositionInLine(), RPARENGen.getLine());
			methodCallReturnNode.getChildren().add(RPARENGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$methodCall.returnNode = methodCallReturnNode;
	}
	;

variable returns [Node returnNode] 
:  IDGen=ID 
	{
		// Create return CST Node
		Node variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		variableReturnNode.setKind("variable");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			variableReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$variable.returnNode = variableReturnNode;
	}
	;

// In case we need to define a typed param...
param returns [Node returnNode] 
:  IDGen=ID 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			paramReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	;

// keywords
NEW      : 'new';
MULTIPLE : 'multiple';
ENUM     : 'enum';
CONTEXT  : 'context';
DEFAULT_METACLASS : 'defaultMetaclass';

// Special Characters
SLASH  : '\u005C';
COMMA  : '\u002C';
SEMI   : '\u003B';
COLON  : '\u003A';
LPAREN : '\u0028';
RPAREN : '\u0029';
LCURLY : '\u007B';
RCURLY : '\u007D';
DOT    : '\u002E';
AT	   : '\u0040';
ID 	   : ('a'..'z' | 'A'..'Z' | '_' | '*') ( 'a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;

COMMENT			:  	 '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;};
LINE_COMMENT 	: 	'--' ~('\n'|'\r')* '\n' {$channel=HIDDEN;} ;
WS  			:  	(' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;};  